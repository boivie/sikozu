// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_core_2eproto__INCLUDED
#define PROTOBUF_core_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace Sikozu {
namespace Messages {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_core_2eproto();
void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class Contact;
class PingRequest;
class PingResponse;
class FindNodeRequest;
class FindNodeResponse;
class QueryServicesRequest;
class QueryServicesResponse;
class GetServicesRequest;
class ServiceInfo;
class GetServicesResponse;

// ===================================================================

class Contact : public ::google::protobuf::Message {
 public:
  Contact();
  virtual ~Contact();
  
  Contact(const Contact& from);
  
  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();
  void Swap(Contact* other);
  
  // implements Message ----------------------------------------------
  
  Contact* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes nid = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  inline const ::std::string& nid() const;
  inline void set_nid(const ::std::string& value);
  inline void set_nid(const char* value);
  inline void set_nid(const void* value, size_t size);
  inline ::std::string* mutable_nid();
  
  // optional uint32 ipv4 = 2;
  inline bool has_ipv4() const;
  inline void clear_ipv4();
  inline ::google::protobuf::uint32 ipv4() const;
  inline void set_ipv4(::google::protobuf::uint32 value);
  
  // optional bytes ipv6 = 3;
  inline bool has_ipv6() const;
  inline void clear_ipv6();
  inline const ::std::string& ipv6() const;
  inline void set_ipv6(const ::std::string& value);
  inline void set_ipv6(const char* value);
  inline void set_ipv6(const void* value, size_t size);
  inline ::std::string* mutable_ipv6();
  
  // required uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* nid_;
  static const ::std::string _default_nid_;
  ::google::protobuf::uint32 ipv4_;
  ::std::string* ipv6_;
  static const ::std::string _default_ipv6_;
  ::google::protobuf::uint32 port_;
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Contact* default_instance_;
};
// -------------------------------------------------------------------

class PingRequest : public ::google::protobuf::Message {
 public:
  PingRequest();
  virtual ~PingRequest();
  
  PingRequest(const PingRequest& from);
  
  inline PingRequest& operator=(const PingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingRequest& default_instance();
  void Swap(PingRequest* other);
  
  // implements Message ----------------------------------------------
  
  PingRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PingRequest* default_instance_;
};
// -------------------------------------------------------------------

class PingResponse : public ::google::protobuf::Message {
 public:
  PingResponse();
  virtual ~PingResponse();
  
  PingResponse(const PingResponse& from);
  
  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingResponse& default_instance();
  void Swap(PingResponse* other);
  
  // implements Message ----------------------------------------------
  
  PingResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PingResponse* default_instance_;
};
// -------------------------------------------------------------------

class FindNodeRequest : public ::google::protobuf::Message {
 public:
  FindNodeRequest();
  virtual ~FindNodeRequest();
  
  FindNodeRequest(const FindNodeRequest& from);
  
  inline FindNodeRequest& operator=(const FindNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindNodeRequest& default_instance();
  void Swap(FindNodeRequest* other);
  
  // implements Message ----------------------------------------------
  
  FindNodeRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes nid = 1;
  inline bool has_nid() const;
  inline void clear_nid();
  inline const ::std::string& nid() const;
  inline void set_nid(const ::std::string& value);
  inline void set_nid(const char* value);
  inline void set_nid(const void* value, size_t size);
  inline ::std::string* mutable_nid();
  
  // optional string service = 2;
  inline bool has_service() const;
  inline void clear_service();
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline ::std::string* mutable_service();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* nid_;
  static const ::std::string _default_nid_;
  ::std::string* service_;
  static const ::std::string _default_service_;
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FindNodeRequest* default_instance_;
};
// -------------------------------------------------------------------

class FindNodeResponse : public ::google::protobuf::Message {
 public:
  FindNodeResponse();
  virtual ~FindNodeResponse();
  
  FindNodeResponse(const FindNodeResponse& from);
  
  inline FindNodeResponse& operator=(const FindNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FindNodeResponse& default_instance();
  void Swap(FindNodeResponse* other);
  
  // implements Message ----------------------------------------------
  
  FindNodeResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Sikozu.Messages.Contact contacts = 1;
  inline int contacts_size() const;
  inline void clear_contacts();
  inline const ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::Contact >& contacts() const;
  inline ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::Contact >* mutable_contacts();
  inline const ::Sikozu::Messages::Contact& contacts(int index) const;
  inline ::Sikozu::Messages::Contact* mutable_contacts(int index);
  inline ::Sikozu::Messages::Contact* add_contacts();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::Contact > contacts_;
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FindNodeResponse* default_instance_;
};
// -------------------------------------------------------------------

class QueryServicesRequest : public ::google::protobuf::Message {
 public:
  QueryServicesRequest();
  virtual ~QueryServicesRequest();
  
  QueryServicesRequest(const QueryServicesRequest& from);
  
  inline QueryServicesRequest& operator=(const QueryServicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryServicesRequest& default_instance();
  void Swap(QueryServicesRequest* other);
  
  // implements Message ----------------------------------------------
  
  QueryServicesRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string service = 1;
  inline int service_size() const;
  inline void clear_service();
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& service() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_service();
  inline const ::std::string& service(int index) const;
  inline ::std::string* mutable_service(int index);
  inline void set_service(int index, const ::std::string& value);
  inline void set_service(int index, const char* value);
  inline ::std::string* add_service();
  inline void add_service(const ::std::string& value);
  inline void add_service(const char* value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> service_;
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueryServicesRequest* default_instance_;
};
// -------------------------------------------------------------------

class QueryServicesResponse : public ::google::protobuf::Message {
 public:
  QueryServicesResponse();
  virtual ~QueryServicesResponse();
  
  QueryServicesResponse(const QueryServicesResponse& from);
  
  inline QueryServicesResponse& operator=(const QueryServicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryServicesResponse& default_instance();
  void Swap(QueryServicesResponse* other);
  
  // implements Message ----------------------------------------------
  
  QueryServicesResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated uint32 present = 1;
  inline int present_size() const;
  inline void clear_present();
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >& present() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >* mutable_present();
  inline ::google::protobuf::uint32 present(int index) const;
  inline void set_present(int index, ::google::protobuf::uint32 value);
  inline void add_present(::google::protobuf::uint32 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > present_;
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueryServicesResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetServicesRequest : public ::google::protobuf::Message {
 public:
  GetServicesRequest();
  virtual ~GetServicesRequest();
  
  GetServicesRequest(const GetServicesRequest& from);
  
  inline GetServicesRequest& operator=(const GetServicesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServicesRequest& default_instance();
  void Swap(GetServicesRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetServicesRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetServicesRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServiceInfo : public ::google::protobuf::Message {
 public:
  ServiceInfo();
  virtual ~ServiceInfo();
  
  ServiceInfo(const ServiceInfo& from);
  
  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceInfo& default_instance();
  void Swap(ServiceInfo* other);
  
  // implements Message ----------------------------------------------
  
  ServiceInfo* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 channel = 1;
  inline bool has_channel() const;
  inline void clear_channel();
  inline ::google::protobuf::uint32 channel() const;
  inline void set_channel(::google::protobuf::uint32 value);
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline ::std::string* mutable_name();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 channel_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ServiceInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetServicesResponse : public ::google::protobuf::Message {
 public:
  GetServicesResponse();
  virtual ~GetServicesResponse();
  
  GetServicesResponse(const GetServicesResponse& from);
  
  inline GetServicesResponse& operator=(const GetServicesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServicesResponse& default_instance();
  void Swap(GetServicesResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetServicesResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Sikozu.Messages.ServiceInfo services = 1;
  inline int services_size() const;
  inline void clear_services();
  inline const ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::ServiceInfo >& services() const;
  inline ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::ServiceInfo >* mutable_services();
  inline const ::Sikozu::Messages::ServiceInfo& services(int index) const;
  inline ::Sikozu::Messages::ServiceInfo* mutable_services(int index);
  inline ::Sikozu::Messages::ServiceInfo* add_services();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::ServiceInfo > services_;
  friend void protobuf_BuildDesc_core_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetServicesResponse* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// Contact

// required bytes nid = 1;
inline bool Contact::has_nid() const {
  return _has_bit(0);
}
inline void Contact::clear_nid() {
  if (nid_ != &_default_nid_) {
    nid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Contact::nid() const {
  return *nid_;
}
inline void Contact::set_nid(const ::std::string& value) {
  _set_bit(0);
  if (nid_ == &_default_nid_) {
    nid_ = new ::std::string;
  }
  nid_->assign(value);
}
inline void Contact::set_nid(const char* value) {
  _set_bit(0);
  if (nid_ == &_default_nid_) {
    nid_ = new ::std::string;
  }
  nid_->assign(value);
}
inline void Contact::set_nid(const void* value, size_t size) {
  _set_bit(0);
  if (nid_ == &_default_nid_) {
    nid_ = new ::std::string;
  }
  nid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_nid() {
  _set_bit(0);
  if (nid_ == &_default_nid_) {
    nid_ = new ::std::string;
  }
  return nid_;
}

// optional uint32 ipv4 = 2;
inline bool Contact::has_ipv4() const {
  return _has_bit(1);
}
inline void Contact::clear_ipv4() {
  ipv4_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 Contact::ipv4() const {
  return ipv4_;
}
inline void Contact::set_ipv4(::google::protobuf::uint32 value) {
  _set_bit(1);
  ipv4_ = value;
}

// optional bytes ipv6 = 3;
inline bool Contact::has_ipv6() const {
  return _has_bit(2);
}
inline void Contact::clear_ipv6() {
  if (ipv6_ != &_default_ipv6_) {
    ipv6_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& Contact::ipv6() const {
  return *ipv6_;
}
inline void Contact::set_ipv6(const ::std::string& value) {
  _set_bit(2);
  if (ipv6_ == &_default_ipv6_) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
}
inline void Contact::set_ipv6(const char* value) {
  _set_bit(2);
  if (ipv6_ == &_default_ipv6_) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(value);
}
inline void Contact::set_ipv6(const void* value, size_t size) {
  _set_bit(2);
  if (ipv6_ == &_default_ipv6_) {
    ipv6_ = new ::std::string;
  }
  ipv6_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Contact::mutable_ipv6() {
  _set_bit(2);
  if (ipv6_ == &_default_ipv6_) {
    ipv6_ = new ::std::string;
  }
  return ipv6_;
}

// required uint32 port = 4;
inline bool Contact::has_port() const {
  return _has_bit(3);
}
inline void Contact::clear_port() {
  port_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 Contact::port() const {
  return port_;
}
inline void Contact::set_port(::google::protobuf::uint32 value) {
  _set_bit(3);
  port_ = value;
}

// -------------------------------------------------------------------

// PingRequest

// -------------------------------------------------------------------

// PingResponse

// -------------------------------------------------------------------

// FindNodeRequest

// required bytes nid = 1;
inline bool FindNodeRequest::has_nid() const {
  return _has_bit(0);
}
inline void FindNodeRequest::clear_nid() {
  if (nid_ != &_default_nid_) {
    nid_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& FindNodeRequest::nid() const {
  return *nid_;
}
inline void FindNodeRequest::set_nid(const ::std::string& value) {
  _set_bit(0);
  if (nid_ == &_default_nid_) {
    nid_ = new ::std::string;
  }
  nid_->assign(value);
}
inline void FindNodeRequest::set_nid(const char* value) {
  _set_bit(0);
  if (nid_ == &_default_nid_) {
    nid_ = new ::std::string;
  }
  nid_->assign(value);
}
inline void FindNodeRequest::set_nid(const void* value, size_t size) {
  _set_bit(0);
  if (nid_ == &_default_nid_) {
    nid_ = new ::std::string;
  }
  nid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FindNodeRequest::mutable_nid() {
  _set_bit(0);
  if (nid_ == &_default_nid_) {
    nid_ = new ::std::string;
  }
  return nid_;
}

// optional string service = 2;
inline bool FindNodeRequest::has_service() const {
  return _has_bit(1);
}
inline void FindNodeRequest::clear_service() {
  if (service_ != &_default_service_) {
    service_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& FindNodeRequest::service() const {
  return *service_;
}
inline void FindNodeRequest::set_service(const ::std::string& value) {
  _set_bit(1);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void FindNodeRequest::set_service(const char* value) {
  _set_bit(1);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline ::std::string* FindNodeRequest::mutable_service() {
  _set_bit(1);
  if (service_ == &_default_service_) {
    service_ = new ::std::string;
  }
  return service_;
}

// -------------------------------------------------------------------

// FindNodeResponse

// repeated .Sikozu.Messages.Contact contacts = 1;
inline int FindNodeResponse::contacts_size() const {
  return contacts_.size();
}
inline void FindNodeResponse::clear_contacts() {
  contacts_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::Contact >&
FindNodeResponse::contacts() const {
  return contacts_;
}
inline ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::Contact >*
FindNodeResponse::mutable_contacts() {
  return &contacts_;
}
inline const ::Sikozu::Messages::Contact& FindNodeResponse::contacts(int index) const {
  return contacts_.Get(index);
}
inline ::Sikozu::Messages::Contact* FindNodeResponse::mutable_contacts(int index) {
  return contacts_.Mutable(index);
}
inline ::Sikozu::Messages::Contact* FindNodeResponse::add_contacts() {
  return contacts_.Add();
}

// -------------------------------------------------------------------

// QueryServicesRequest

// repeated string service = 1;
inline int QueryServicesRequest::service_size() const {
  return service_.size();
}
inline void QueryServicesRequest::clear_service() {
  service_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QueryServicesRequest::service() const {
  return service_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QueryServicesRequest::mutable_service() {
  return &service_;
}
inline const ::std::string& QueryServicesRequest::service(int index) const {
  return service_.Get(index);
}
inline ::std::string* QueryServicesRequest::mutable_service(int index) {
  return service_.Mutable(index);
}
inline void QueryServicesRequest::set_service(int index, const ::std::string& value) {
  service_.Mutable(index)->assign(value);
}
inline void QueryServicesRequest::set_service(int index, const char* value) {
  service_.Mutable(index)->assign(value);
}
inline ::std::string* QueryServicesRequest::add_service() {
  return service_.Add();
}
inline void QueryServicesRequest::add_service(const ::std::string& value) {
  service_.Add()->assign(value);
}
inline void QueryServicesRequest::add_service(const char* value) {
  service_.Add()->assign(value);
}

// -------------------------------------------------------------------

// QueryServicesResponse

// repeated uint32 present = 1;
inline int QueryServicesResponse::present_size() const {
  return present_.size();
}
inline void QueryServicesResponse::clear_present() {
  present_.Clear();
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QueryServicesResponse::present() const {
  return present_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QueryServicesResponse::mutable_present() {
  return &present_;
}
inline ::google::protobuf::uint32 QueryServicesResponse::present(int index) const {
  return present_.Get(index);
}
inline void QueryServicesResponse::set_present(int index, ::google::protobuf::uint32 value) {
  present_.Set(index, value);
}
inline void QueryServicesResponse::add_present(::google::protobuf::uint32 value) {
  present_.Add(value);
}

// -------------------------------------------------------------------

// GetServicesRequest

// -------------------------------------------------------------------

// ServiceInfo

// required uint32 channel = 1;
inline bool ServiceInfo::has_channel() const {
  return _has_bit(0);
}
inline void ServiceInfo::clear_channel() {
  channel_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 ServiceInfo::channel() const {
  return channel_;
}
inline void ServiceInfo::set_channel(::google::protobuf::uint32 value) {
  _set_bit(0);
  channel_ = value;
}

// required string name = 2;
inline bool ServiceInfo::has_name() const {
  return _has_bit(1);
}
inline void ServiceInfo::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ServiceInfo::name() const {
  return *name_;
}
inline void ServiceInfo::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ServiceInfo::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline ::std::string* ServiceInfo::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// -------------------------------------------------------------------

// GetServicesResponse

// repeated .Sikozu.Messages.ServiceInfo services = 1;
inline int GetServicesResponse::services_size() const {
  return services_.size();
}
inline void GetServicesResponse::clear_services() {
  services_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::ServiceInfo >&
GetServicesResponse::services() const {
  return services_;
}
inline ::google::protobuf::RepeatedPtrField< ::Sikozu::Messages::ServiceInfo >*
GetServicesResponse::mutable_services() {
  return &services_;
}
inline const ::Sikozu::Messages::ServiceInfo& GetServicesResponse::services(int index) const {
  return services_.Get(index);
}
inline ::Sikozu::Messages::ServiceInfo* GetServicesResponse::mutable_services(int index) {
  return services_.Mutable(index);
}
inline ::Sikozu::Messages::ServiceInfo* GetServicesResponse::add_services() {
  return services_.Add();
}


}  // namespace Messages
}  // namespace Sikozu
#endif  // PROTOBUF_core_2eproto__INCLUDED
