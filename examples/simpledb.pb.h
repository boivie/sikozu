// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_simpledb_2eproto__INCLUDED
#define PROTOBUF_simpledb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2000003
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2000003 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace Sikozu {
namespace SimpleDb {
namespace Messages {

// Internal implementation detail -- do not call these.
void  protobuf_BuildDesc_simpledb_2eproto();
void protobuf_BuildDesc_simpledb_2eproto_AssignGlobalDescriptors(
    ::google::protobuf::FileDescriptor* file);

class PutRequest;
class PutResponse;
class GetRequest;
class GetResponse;
class DeleteRequest;
class DeleteResponse;

// ===================================================================

class PutRequest : public ::google::protobuf::Message {
 public:
  PutRequest();
  virtual ~PutRequest();
  
  PutRequest(const PutRequest& from);
  
  inline PutRequest& operator=(const PutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutRequest& default_instance();
  void Swap(PutRequest* other);
  
  // implements Message ----------------------------------------------
  
  PutRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline ::std::string* mutable_key();
  
  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // optional uint32 ttl = 3;
  inline bool has_ttl() const;
  inline void clear_ttl();
  inline ::google::protobuf::uint32 ttl() const;
  inline void set_ttl(::google::protobuf::uint32 value);
  
  // optional bytes secret_hash = 4;
  inline bool has_secret_hash() const;
  inline void clear_secret_hash();
  inline const ::std::string& secret_hash() const;
  inline void set_secret_hash(const ::std::string& value);
  inline void set_secret_hash(const char* value);
  inline void set_secret_hash(const void* value, size_t size);
  inline ::std::string* mutable_secret_hash();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  ::google::protobuf::uint32 ttl_;
  ::std::string* secret_hash_;
  static const ::std::string _default_secret_hash_;
  friend void protobuf_BuildDesc_simpledb_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PutRequest* default_instance_;
};
// -------------------------------------------------------------------

class PutResponse : public ::google::protobuf::Message {
 public:
  PutResponse();
  virtual ~PutResponse();
  
  PutResponse(const PutResponse& from);
  
  inline PutResponse& operator=(const PutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutResponse& default_instance();
  void Swap(PutResponse* other);
  
  // implements Message ----------------------------------------------
  
  PutResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool success = 1 [default = true];
  inline bool has_success() const;
  inline void clear_success();
  inline bool success() const;
  inline void set_success(bool value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool success_;
  friend void protobuf_BuildDesc_simpledb_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PutResponse* default_instance_;
};
// -------------------------------------------------------------------

class GetRequest : public ::google::protobuf::Message {
 public:
  GetRequest();
  virtual ~GetRequest();
  
  GetRequest(const GetRequest& from);
  
  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRequest& default_instance();
  void Swap(GetRequest* other);
  
  // implements Message ----------------------------------------------
  
  GetRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline ::std::string* mutable_key();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  friend void protobuf_BuildDesc_simpledb_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetRequest* default_instance_;
};
// -------------------------------------------------------------------

class GetResponse : public ::google::protobuf::Message {
 public:
  GetResponse();
  virtual ~GetResponse();
  
  GetResponse(const GetResponse& from);
  
  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetResponse& default_instance();
  void Swap(GetResponse* other);
  
  // implements Message ----------------------------------------------
  
  GetResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool success = 1 [default = true];
  inline bool has_success() const;
  inline void clear_success();
  inline bool success() const;
  inline void set_success(bool value);
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool success_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void protobuf_BuildDesc_simpledb_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GetResponse* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::Message {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();
  
  DeleteRequest(const DeleteRequest& from);
  
  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequest& default_instance();
  void Swap(DeleteRequest* other);
  
  // implements Message ----------------------------------------------
  
  DeleteRequest* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline ::std::string* mutable_key();
  
  // required bytes secret = 2;
  inline bool has_secret() const;
  inline void clear_secret();
  inline const ::std::string& secret() const;
  inline void set_secret(const ::std::string& value);
  inline void set_secret(const char* value);
  inline void set_secret(const void* value, size_t size);
  inline ::std::string* mutable_secret();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* secret_;
  static const ::std::string _default_secret_;
  friend void protobuf_BuildDesc_simpledb_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteResponse : public ::google::protobuf::Message {
 public:
  DeleteResponse();
  virtual ~DeleteResponse();
  
  DeleteResponse(const DeleteResponse& from);
  
  inline DeleteResponse& operator=(const DeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteResponse& default_instance();
  void Swap(DeleteResponse* other);
  
  // implements Message ----------------------------------------------
  
  DeleteResponse* New() const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void protobuf_BuildDesc_simpledb_2eproto_AssignGlobalDescriptors(
      const ::google::protobuf::FileDescriptor* file);
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DeleteResponse* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// PutRequest

// required string key = 1;
inline bool PutRequest::has_key() const {
  return _has_bit(0);
}
inline void PutRequest::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& PutRequest::key() const {
  return *key_;
}
inline void PutRequest::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PutRequest::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline ::std::string* PutRequest::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// required bytes value = 2;
inline bool PutRequest::has_value() const {
  return _has_bit(1);
}
inline void PutRequest::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PutRequest::value() const {
  return *value_;
}
inline void PutRequest::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PutRequest::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PutRequest::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PutRequest::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// optional uint32 ttl = 3;
inline bool PutRequest::has_ttl() const {
  return _has_bit(2);
}
inline void PutRequest::clear_ttl() {
  ttl_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 PutRequest::ttl() const {
  return ttl_;
}
inline void PutRequest::set_ttl(::google::protobuf::uint32 value) {
  _set_bit(2);
  ttl_ = value;
}

// optional bytes secret_hash = 4;
inline bool PutRequest::has_secret_hash() const {
  return _has_bit(3);
}
inline void PutRequest::clear_secret_hash() {
  if (secret_hash_ != &_default_secret_hash_) {
    secret_hash_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& PutRequest::secret_hash() const {
  return *secret_hash_;
}
inline void PutRequest::set_secret_hash(const ::std::string& value) {
  _set_bit(3);
  if (secret_hash_ == &_default_secret_hash_) {
    secret_hash_ = new ::std::string;
  }
  secret_hash_->assign(value);
}
inline void PutRequest::set_secret_hash(const char* value) {
  _set_bit(3);
  if (secret_hash_ == &_default_secret_hash_) {
    secret_hash_ = new ::std::string;
  }
  secret_hash_->assign(value);
}
inline void PutRequest::set_secret_hash(const void* value, size_t size) {
  _set_bit(3);
  if (secret_hash_ == &_default_secret_hash_) {
    secret_hash_ = new ::std::string;
  }
  secret_hash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PutRequest::mutable_secret_hash() {
  _set_bit(3);
  if (secret_hash_ == &_default_secret_hash_) {
    secret_hash_ = new ::std::string;
  }
  return secret_hash_;
}

// -------------------------------------------------------------------

// PutResponse

// required bool success = 1 [default = true];
inline bool PutResponse::has_success() const {
  return _has_bit(0);
}
inline void PutResponse::clear_success() {
  success_ = true;
  _clear_bit(0);
}
inline bool PutResponse::success() const {
  return success_;
}
inline void PutResponse::set_success(bool value) {
  _set_bit(0);
  success_ = value;
}

// -------------------------------------------------------------------

// GetRequest

// required string key = 1;
inline bool GetRequest::has_key() const {
  return _has_bit(0);
}
inline void GetRequest::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GetRequest::key() const {
  return *key_;
}
inline void GetRequest::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void GetRequest::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline ::std::string* GetRequest::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// -------------------------------------------------------------------

// GetResponse

// required bool success = 1 [default = true];
inline bool GetResponse::has_success() const {
  return _has_bit(0);
}
inline void GetResponse::clear_success() {
  success_ = true;
  _clear_bit(0);
}
inline bool GetResponse::success() const {
  return success_;
}
inline void GetResponse::set_success(bool value) {
  _set_bit(0);
  success_ = value;
}

// optional bytes value = 2;
inline bool GetResponse::has_value() const {
  return _has_bit(1);
}
inline void GetResponse::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& GetResponse::value() const {
  return *value_;
}
inline void GetResponse::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void GetResponse::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void GetResponse::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GetResponse::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// DeleteRequest

// required string key = 1;
inline bool DeleteRequest::has_key() const {
  return _has_bit(0);
}
inline void DeleteRequest::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DeleteRequest::key() const {
  return *key_;
}
inline void DeleteRequest::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void DeleteRequest::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline ::std::string* DeleteRequest::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// required bytes secret = 2;
inline bool DeleteRequest::has_secret() const {
  return _has_bit(1);
}
inline void DeleteRequest::clear_secret() {
  if (secret_ != &_default_secret_) {
    secret_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DeleteRequest::secret() const {
  return *secret_;
}
inline void DeleteRequest::set_secret(const ::std::string& value) {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  secret_->assign(value);
}
inline void DeleteRequest::set_secret(const char* value) {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  secret_->assign(value);
}
inline void DeleteRequest::set_secret(const void* value, size_t size) {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  secret_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteRequest::mutable_secret() {
  _set_bit(1);
  if (secret_ == &_default_secret_) {
    secret_ = new ::std::string;
  }
  return secret_;
}

// -------------------------------------------------------------------

// DeleteResponse


}  // namespace Messages
}  // namespace SimpleDb
}  // namespace Sikozu
#endif  // PROTOBUF_simpledb_2eproto__INCLUDED
